#!/usr/bin/env bash

count=1

# Script's color palette
reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[33m▸ $reset"
dim="\033[2m"
bold="\033[1m"

# Get full directory name of this script
cwd="$(cd "$(dirname "$0")" && pwd)"

# Keep-alive: update existing `sudo` time stamp until script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

headline() {
    printf "${highlight} %s ${reset}\n" "$@"
}

chapter() {
    echo -e "${highlight} $((count++)).) $@ ${reset}\n"
}

# Prints out a step, if last parameter is true then without an ending newline
step() {
    if [ $# -eq 1 ]
    then echo -e "${dot}$@"
    else echo -ne "${dot}$@"
    fi
}

run() {
    echo -e "${dim}▹ $@ $reset"
    eval $@
    echo ""
}


# Just a little welcome screen
echo ""
headline "                                                "
headline "        We are about to setup your  Mac!       "
headline "     Follow the prompts and you’ll be fine.     "
headline "                                                "
echo ""

# Close any open System Preferences panes, to prevent them from overriding
# settings we’re about to change
osascript -e 'tell application "System Preferences" to quit'

# Ask for the administrator password upfront
if [ $(sudo -n uptime 2>&1|grep "load"|wc -l) -eq 0 ]
then
    step "Some of these settings are system-wide, therefore we need your permission."
    sudo -v
    echo ""
fi

chapter "Adjusting Power or Energy settings"

step "Set Display to Sleep after 15 Minutes of Inactivity? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run sudo pmset displaysleep 15
        ;;
esac

step "Turn Off System Sleep Completely (System never sleeps)? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run sudo systemsetup -setcomputersleep Never
        ;;
esac

chapter "Adjusting screen settings"

step "Disable shadow in screenshots? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.screencapture disable-shadow -bool true
        ;;
esac

chapter "Adjusting Finder settings"

step "Set Home as the default location for new Finder windows? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.finder NewWindowTarget -string '"PfLo"'
        run defaults write com.apple.finder NewWindowTargetPath -string "'file://${HOME}/'"
        ;;
esac

step "Keep folders on top when sorting by name? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.finder _FXSortFoldersFirst -bool true
        ;;
esac

step "Use list view in all Finder windows by default? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.finder FXPreferredViewStyle -string '"Nlsv"'
        ;;
esac

chapter "Adjusting Dock, Dashboard, and hot corners"

step "Change the icon size (in px) of Dock items? [36/n]: " ""
read tilesize
echo "Input large size in px or Default is 40"
read largetilesize
case $largetilesize in
    [nN] )
        echo ""
        ;;
    * )
        echo ""
        run defaults write com.apple.dock magnification -bool true
        run defaults write com.apple.dock tilesize -int ${tilesize:-36}
        run defaults write com.apple.dock largesize -int ${largetilesize:-40}
        ;;
esac

step "Automatically hide and show the Dock? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.dock autohide -bool true
        ;;
esac

step "Change Dock postion to Left side? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.dock orientation left
        ;;
esac

step "Make Dock icons of hidden applications translucent? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.dock showhidden -bool true
        ;;
esac

step "Don’t show recent applications in Dock? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.dock show-recents -bool false
        ;;
esac

step "Remove all (default) app icons from the Dock? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.dock persistent-apps -array
        run defaults write com.apple.dock recent-apps -array
        ;;
esac

chapter "Adjusting some app preferences"

step "Enable the Develop options in Safari? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.Safari IncludeInternalDebugMenu -bool true && \
        run defaults write com.apple.Safari IncludeDevelopMenu -bool true && \
        run defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true && \
        run defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true && \
        run defaults write -g WebKitDeveloperExtras -bool true
        ;;
esac

chapter "Adjusting Mac App Store settings"

step "Enable the automatic update check? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
        ;;
esac

step "Check for software updates daily, not just once per week? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
        ;;
esac

step "Download newly available updates in background? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1
        ;;
esac

step "Install System data files & security updates? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1
        ;;
esac

step "Turn on app auto-update? [Y/n]: " ""
case $(read choice; echo $choice) in
    [nN] )
        echo ""
        ;;
    [yY] | * )
        echo ""
        run defaults write com.apple.commerce AutoUpdate -bool true
        ;;
esac

run killall Dock

chapter "Installing…"

which -s xcode-select
if [[ $? != 0 ]] ; then
    step "xcodetools\n"
    echo "Installing XCode Tools"
    run xcode-select --install
else
    echo "Found XCode Tools"
fi

which -s brew
if [[ $? != 0 ]] ; then
    step "Homebrew\n"
    run '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
else
    run brew update
fi

step "CLI packages\n"

for app in $(<$cwd/lists/cli); do
    if ! brew list -1 | grep -q "^${app}\$"; then
        run brew install $app
    fi
done

run brew tap homebrew/cask-versions
run brew tap imabhaysutar/tap

step "Desktop apps\n"

for app in $(<$cwd/lists/casks/desktop); do
    if ! brew list --cask -1 | grep -q "^${app}\$"; then
        run brew install --cask $app
    fi
done

step "AppStore apps\n"

for appid in $(<$cwd/lists/appstore); do
    if ! mas list | grep -q "^${appid}\$"; then
        run mas install $appid
    fi
done


step "Fonts\n"

run brew tap homebrew/cask-fonts

for font in $(<$cwd/lists/casks/fonts); do
    if ! brew cask list -1 | grep -q "^${font}\$"; then
        run brew install --cask $font --fontdir=/Library/Fonts
    fi
done

step "Cleanup\n"

run brew cleanup

chapter "Restoring…"

step "Set default wallpaper\n"
run sqlite3 "~/Library/Application\ Support/Dock/desktoppicture.db" "\"\
DELETE FROM data; \
DELETE FROM displays; \
DELETE FROM pictures; \
DELETE FROM preferences; \
DELETE FROM prefs; \
DELETE FROM spaces; \
INSERT INTO pictures (space_id, display_id) VALUES (null, null); \
INSERT INTO data (value) VALUES ('${cwd}/wallpaper.jpg'); \
INSERT INTO preferences (key, data_id, picture_id) VALUES (1, 1, 1); \
\""
run killall Dock
